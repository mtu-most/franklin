#! /bin/bash

### BEGIN INIT INFO
# Provides:		franklin
# Required-Start:	$network $remote_fs
# Required-Stop:	$network $remote_fs
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	Server for RepRap 3-D printers
# Description:		Allow browser and python clients to control a 3-D printer
### END INIT INFO

# The defaults below can be overridden in this file.
CONFIG_FILE=/etc/default/franklin

# All the commented values below are the defaults.  If the variables are given a value (even if empty), they will be passed to the server.

# Port to listen for browser requests.
#PORT=8000

# Address to listen on.  Set to 0.0.0.0 to disable IPv6 (needed on Raspberry Pi).
#ADDRESS=

# Use SSL connections.
#TLS=False

# Location of log file or directory.  Set to /var/log/franklin to enable logging in the default location.
#LOG=

# The server keeps a list of serial ports on the system.  If this is set to
# yes, it tries to connect to a printer on any new port (and at startup, on any
# port).
#AUTODETECT=True

# System command to run before trying to detect a printer.
#PREDETECT='stty -F "$PORT" raw 115200'

# System command to run when a controller is found.
#CONTROLLER='/usr/lib/franklin/controller.py --dev "$PORT"'

# Regular expression of serial ports to use.
#WHITELIST=''

# Regular expression of serial ports to ignore.
#BLACKLIST='/dev/(input/.*|ptmx|console|tty(printk|(GS)?\d*))$'
#ADD_BLACKLIST='$'

# Allowed system commands.  This must be a regular expressing.  Use '.*' for
# allowing everything.  Only do this if everyone who can reach the page
# is trusted!
#ALLOW_SYSTEM='$'

# Required credentials for different roles.
#REMOTEPWD=''
#USERPWD=''
#EXPERTPWD=''
#ADMINPWD=''

# Command to run in a shell when a print is done (finished or aborted).
# May contain the following (including the square brackets), which will be
# replaced:
# [[STATE]]	replaced with 'completed' or 'aborted' (without quotes)
# [[REASON]]	replaced with the reason that printing stopped
# This could be set to something like
# 'echo "your print was [[STATE]]: [[REASON]]" | mail -s "print [[STATE]] - [[REASON]]" your@mail.address.example.com'
#DONE=''

# File for storing the pid.  You probably don't need to change this.
PIDFILE=/run/franklin.pid

# End of variable list.

if test -r $CONFIG_FILE; then
	. $CONFIG_FILE
fi

NAME=franklin
DESC="Server for RepRap 3-D printers"
DAEMON=/usr/bin/franklin
ARGS=(--quiet --make-pidfile --pidfile "$PIDFILE" --chuid _franklin:_franklin)
START_ARGS=("${ARGS[@]}" --background --oknodo --start --startas "$DAEMON" -- --system)
if [ x"$AUTODETECT" = xFalse ] ; then	START_ARGS+=(--noautodetect) ; fi
if [ -v PREDETECT ] ; then	START_ARGS+=(--predetect="$PREDETECT") ; fi
if [ -v CONTROLLER ] ; then	START_ARGS+=(--controller="$CONTROLLER") ; fi
if [ -v PORT ] ; then		START_ARGS+=(--port="$PORT") ; fi
if [ -v ADDRESS ] ; then	START_ARGS+=(--address="$ADDRESS") ; fi
if [ x"$TLS" = xTrue ] ; then	START_ARGS+=(--tls) ; fi
if [ -v LOG ] ; then		START_ARGS+=(--log="$LOG") ; fi
if [ -v WHITELIST ] ; then	START_ARGS+=(--whitelist="$WHITELIST") ; fi
if [ -v BLACKLIST ] ; then	START_ARGS+=(--blacklist="$BLACKLIST") ; fi
if [ -v ADD_BLACKLIST ] ; then	START_ARGS+=(--add-blacklist="$ADD_BLACKLIST") ; fi
if [ -v ALLOW_SYSTEM ] ; then	START_ARGS+=(--allow-system="$ALLOW_SYSTEM") ; fi
if [ -v REMOTEPWD ] ; then	START_ARGS+=(--remote="$REMOTEPWD") ; fi
if [ -v USERPWD ] ; then	START_ARGS+=(--user="$USERPWD") ; fi
if [ -v EXPERTPWD ] ; then	START_ARGS+=(--expert="$EXPERTPWD") ; fi
if [ -v ADMINPWD ] ; then	START_ARGS+=(--admin="$ADMINPWD") ; fi
if [ -v DONE ] ; then		START_ARGS+=(--done="$DONE") ; fi
STOP_ARGS=("${ARGS[@]}" --oknodo --stop)

if test ! -x "$DAEMON"; then
	echo "$DAEMON does not exist"
	exit 0
fi

. /lib/lsb/init-functions

#
# Start the daemon.
#
do_start()
{
	if [ ! -d /run/franklin ] ; then
		mkdir /run/franklin
		chown _franklin:_franklin /run/franklin
	fi
	start-stop-daemon "${START_ARGS[@]}"
	RETVAL="$?"
	if [ "$RETVAL" -eq 0 ]; then
		# It might be that the daemon is not started
		# (see start-stop-daemon --background for explanation)

		# Wait a little bit to allow the daemon to start
		sleep 1
		start-stop-daemon --status "${ARGS[@]}"
		RETVAL="$?"
		case "$RETVAL" in
			0) ;;
			*) RETVAL=1 ;;
		esac
	fi
	return "$RETVAL"
}

#
# Stop the daemon and clean up.
#
do_stop()
{
	start-stop-daemon "${STOP_ARGS[@]}"
	RETVAL="$?"
	[ "$RETVAL" -eq 0 ] && rm -f "$PIDFILE"
	return "$RETVAL"
}

case "$1" in
	start)
		log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		log_end_msg $?
		;;
	stop)
		log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		log_end_msg $?
		;;
	restart|force-reload)
		log_daemon_msg "Restarting $DESC" "$NAME"
		if do_stop; then
			do_start
			log_end_msg $?
		else
			log_end_msg $?
		fi
		;;
	status)
		status_of_proc "$NAME" "$DESC"
		;;
	*)
		log_success_msg "Usage: $0 {start|stop|restart|force-reload|status}"
		exit 1
		;;
esac

exit 0
