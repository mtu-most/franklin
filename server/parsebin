#!/usr/bin/python3
# vim: foldmethod=marker :
# parsebin - Analyse parsed G-Code. {{{
# Copyright 2014-2016 Michigan Technological University
# Copyright 2016 Bas Wijnen <wijnen@debian.org>
# Author: Bas Wijnen <wijnen@debian.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# }}}

import struct
import fhs
import math
import sys

scale = 30
offset = 12 * scale

fhs.option('svg', 'generate svg output', argtype = bool)
fhs.option('z', 'parse this layer only', default = float('nan'))
fhs.option('offset', 'offset per layer', default = 0.0)
config = fhs.init()

file = open(sys.argv[1], 'rb')

def warn(msg):
	sys.stderr.write('%d: ' % n + msg + '\n')

cmds = ['system', 'poly3+', 'poly3-', 'poly2', 'arc', 'abc', 'goto', 'gpio', 'set T', 'wait T', 'setpos', 'wait', 'confirm', 'park', 'pattern', 'clearp', 'storep', 'usep', 'adjustp']
def mkcmd(t):
	if t < len(cmds):
		return cmds[t]
	return '0x%x' % t

pos = (float('nan'), float('nan'), 0.0)
current_v = (0, 0, 0)
current_a = (0, 0, 0)
dataformat = '=Bl' + 'd' * 11 + 'q'
datasize = struct.calcsize(dataformat)
path = ''
footerformat = '=l' + 'd' * 7
footersize = struct.calcsize(footerformat)
file.seek(-footersize, 2)
footer = struct.unpack(footerformat, file.read(footersize))
numstrings = footer[0]
bbox = footer[1:-1]
jobtime = footer[-1]
strings = []
lenformat = '=' + 'l' * numstrings
lensize = struct.calcsize(lenformat)
file.seek(-footersize - lensize, 2)
stringlengths = struct.unpack(lenformat, file.read(lensize))
totalstringlength = sum(stringlengths)
fullsize = file.seek(-footersize - lensize - totalstringlength, 2)
for s in stringlengths:
	strings.append(file.read(s))
file.seek(0, 0)

minutes = jobtime // 60
seconds = jobtime - minutes * 60

num_records = fullsize // datasize
assert fullsize % datasize == 0

n = 0
if config['svg']:
	print('<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">')
	print('<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink">')
	print('<g fill="none" stroke="black" stroke-width="0.01">')
else:
	print('# Total time: %02d:%05.2f' % (minutes, seconds))
	print('# Bbox: %s' % str(bbox))
	for i, s in enumerate(strings):
		print('# String %d: %s' % (i, s))
	print('#  n command tool          X          Y          Z      h[0]      h[1]      h[2]       Jg      tf     v0       E      time line')

for record in range(num_records):
	extra = ''
	s = file.read(datasize)
	assert len(s) == datasize
	#print('pos:', pos)
	t, T, X, Y, Z, h0, h1, h2, Jg, tf, v0, E, time, line = struct.unpack(dataformat, s)
	if not math.isnan(config['z']) and Z != config['z']:
		n += 1
		continue
	if mkcmd(t) == 'pattern':
		if T > 72:
			warn('invalid pattern record')
		if not config['svg']:
			print('%d\tpattern\t%d\t%s' % (n, T, ' '.join('%02x' % x for x in s[5:5 + (T if T <= 72 else 72)])))
	plotY = Y + Z * config['offset']
	if mkcmd(t) == 'goto':
		# goto.
		path += 'M%f %f' % (X, plotY)
		pos = (X, Y, Z)
		if sum(x ** 2 for x in current_v) > 1e-2:
			warn("goto while v is not 0")
		if sum(x ** 2 for x in current_a) > 1e-2:
			warn("goto while a is not 0")
		current_v = (0, 0, 0)
		current_a = (0, 0, 0)
	elif mkcmd(t) == 'poly3+':
		# poly3plus.
		if math.isnan(pos[0]) or math.isnan(pos[1]) or any(math.isnan(c) for c in (h0, h1, h2)):
			warn('poly3plus with NaN x or y position, or h vector')
		else:
			g = tuple(x - pos[i] for i, x in enumerate((X, Y, Z)))
			leng = sum(x ** 2 for x in g) ** .5
			Jh = sum(x ** 2 for x in (h0, h1, h2)) ** .5
			unitg = (0, 0, 0) if leng == 0 else tuple(x / leng for x in g)
			unith = (0, 0, 0) if Jh == 0 else tuple(x / Jh for x in (h0, h1, h2))
			try:
				fg = Jg / 6 * tf ** 3 + v0 * tf
				fh = Jh / 6 * tf ** 3
			except:
				fg = 0
				fh = 0
			newpos = tuple(fg * unitg[i] + fh * unith[i] + pos[i] for i in range(3))
			cross = tuple(current_v[(i + 1) % 3] * v0 * unitg[(i + 2) % 3] - current_v[(i + 2) % 3] * v0 * unitg[(i + 1) % 3] for i in range(3))
			if sum(c ** 2 for c in cross) > 1e-4:
				warn("start v (%f,%f,%f) and end v (%f,%f,%f) do not match for %f,%f,%f (cross %f,%f,%f)" % (current_v[0], current_v[1], current_v[2], v0 * unitg[0], v0 * unitg[1], v0 * unitg[2], X, Y, Z, cross[0], cross[1], cross[2]))
			current_v = tuple((Jg / 2 * tf ** 2 + v0) * unitg[i] + Jh / 2 * tf ** 2 * unith[i] for i in range(3))
			if sum(x ** 2 for x in current_a) > 1e-4:
				warn("poly3plus while a is not 0")
			current_a = tuple(Jg * tf * unitg[i] + Jh * tf * unith[i] for i in range(3))
			if Jh == 0:
				if (any(abs(n - p) > 1e-2 for n, p in zip(newpos, (X, Y, Z)))):
					warn('given and computed position differ: %f,%f,%f != %f,%f,%f' % (X, Y, Z, newpos[0], newpos[1], newpos[2]))
				path += 'L%f %f' % (newpos[0], newpos[1] + Z * config['offset'])
			else:
				vgvh = (Jg / 2 * tf ** 2 + v0) / (Jh / 2 * tf ** 2)
				dg = Jh / 6 * tf ** 3 * vgvh
				l = Jg / 6 * tf ** 3 + v0 * tf - dg
				control = tuple(pos[i] + unitg[i] * l for i in range(3))
				path += 'Q%f %f,%f %f' % (control[0], control[1] + Z * config['offset'], newpos[0], newpos[1] + Z * config['offset'])
		pos = (X, Y, Z)
	elif mkcmd(t) == 'poly3-':
		# poly3minus
		g = tuple(x - pos[i] for i, x in enumerate((X, Y, Z)))
		leng = sum(x ** 2 for x in g) ** .5
		Jh = sum(x ** 2 for x in (h0, h1, h2)) ** .5
		unitg = (0, 0, 0) if leng == 0 else tuple(x / leng for x in g)
		unith = (0, 0, 0) if Jh == 0 else tuple(x / Jh for x in (h0, h1, h2))
		fg = Jg / 6 * tf ** 3 + v0 * tf
		fh = Jh / 6 * tf ** 3
		frompos = tuple((X, Y, Z)[i] - fg * unitg[i] + fh * unith[i] for i in range(3))
		new_v = tuple((Jg / 2 * tf ** 2 + v0) * unitg[i] - Jh / 2 * tf ** 2 * unith[i] for i in range(3))
		cross = tuple(current_v[(i + 1) % 3] * new_v[(i + 2) % 3] - current_v[(i + 2) % 3] * new_v[(i + 1) % 3] for i in range(3))
		if sum(c ** 2 for c in cross) > 1e-4:
			warn("poly3- start v (%f,%f,%f) and end v (%f,%f,%f) do not match for %f,%f,%f (cross %f,%f,%f)" % (current_v[0], current_v[1], current_v[2], new_v[0], new_v[1], new_v[2], X, Y, Z, cross[0], cross[1], cross[2]))
		current_v = tuple(v0 * unitg[i] for i in range(3))
		new_a = tuple(-Jg * tf * unitg[i] + Jh * tf * unith[i] for i in range(3))
		cross = tuple(current_a[(i + 1) % 3] * new_a[(i + 2) % 3] - current_a[(i + 2) % 3] * new_a[(i + 1) % 3] for i in range(3))
		if sum(c ** 2 for c in cross) > 1:
			warn("poly3- start a (%f,%f,%f) and end a (%f,%f,%f) do not match for %f,%f,%f (cross %f,%f,%f)" % (current_a[0], current_a[1], current_a[2], new_a[0], new_a[1], new_a[2], X, Y, Z, cross[0], cross[1], cross[2]))
		current_a = (0, 0, 0)
		if (any(abs(n - p) > 1e-2 for n, p in zip(newpos, frompos))):
			warn('positions in poly3- differ: %f,%f,%f != %f,%f,%f diff: %f,%f,%f fg=%f fh=%f' % (newpos[0], newpos[1], newpos[2], frompos[0], frompos[1], frompos[2], newpos[0] - frompos[0], newpos[1] - frompos[1], newpos[2] - frompos[2], fg, fh))
			path += 'M%f %f' % (frompos[0], frompos[1])
		denominator = Jh / 2 * tf ** 2
		vgvh = (Jg / 2 * tf ** 2 + v0) / (Jh / 2 * tf ** 2) if denominator != 0 else 0
		dg = Jh / 6 * tf ** 3 * vgvh
		l = Jg / 6 * tf ** 3 + v0 * tf - dg
		control = tuple((X, Y, Z)[i] + unitg[i] * l for i in range(3))
		#path += 'M%f %f' % (X, plotY)
		path += 'Q%f %f,%f %f' % (control[0], control[1] + Z * config['offset'], X, plotY)
		pos = (X, Y, Z)
	elif mkcmd(t) == 'poly2':
		# poly2
		path += 'L%f %f' % (X, Y)
		g = tuple(x - pos[i] for i, x in enumerate((X, Y, Z)))
		leng = sum(x ** 2 for x in g) ** .5
		unitg = tuple(x / leng for x in g)
		Jh = sum(x ** 2 for x in (h0, h1, h2)) ** .5
		if Jh != 0:
			warn("Jh is non-0 for poly2: %f" % Jh)
		# Jg is really a for poly2.
		newpos = tuple(x + (v0 * tf + Jg / 2 * tf ** 2) * u for (x, u) in zip(pos, unitg))
		if (any(abs(n - p) > 1e-2 for n, p in zip(newpos, (X, Y, Z)))):
			warn("incorrect end position for poly2: %f,%f,%f != %f,%f,%f" % (newpos[0], newpos[1], newpos[2], X, Y, Z))
		start_v = tuple(v0 * u for u in unitg)
		if sum((c - s) ** 2 for c, s in zip(current_v, start_v)) > 1e-4:
			warn("incorrect end velocity for poly2: %f,%f,%f != %f,%f,%f" % (start_v + current_v))
		current_v = tuple((v0 + Jg * tf) * u for u in unitg)
		start_a = tuple(Jg * u for u in unitg)
		if sum((c - s) ** 2 for c, s in zip(current_a, start_a)) > 1e-4:
			warn("incorrect end acceleration for poly2: %f,%f,%f != %f,%f,%f" % (start_a + current_a))
		pos = (X, Y, Z)
	elif mkcmd(t) == 'arc':
		# arc
		pos = (X, Y, Z)
		# TODO
	if not config['svg']:
		print(('%4d %7s %4d %10.5f %10.5f %10.5f %9.2f %9.2f %9.2f %8.0f %7.4f %6.2f %7.1f %9.3f %4d%s') % (n, mkcmd(t), T, X, Y, Z, h0, h1, h2, Jg, tf, v0, E, time, line, extra))
	n += 1

if sum(c ** 2 for c in current_v) > 1e-4:
	warn("file ends with non-0 velocity: %f,%f,%f" % current_v)
if sum(c ** 2 for c in current_a) > 1e-4:
	warn("file ends with non-0 acceleration: %f,%f,%f" % current_a)

if config['svg']:
	print('<path d="%s"/>' % path);
	print('</g>')
	print('</svg>')
